---
- name: Initialize Kubernetes master with kubeadm init
  command: >
    kubeadm init
    {% if kubernetes_version != 'latest' %}
    --kubernetes-version={{ kubernetes_version }}
    {% endif %}
    {% if kubernetes_apiserver_advertise_address is defined %}
    --apiserver-advertise-address={{ kubernetes_apiserver_advertise_address }}
    {% endif %}
    {% if kubernetes_ignore_preflight_errors is defined %}
    --ignore-preflight-errors={{ kubernetes_ignore_preflight_errors }}
    {% endif %}
    --pod-network-cidr={{ kubernetes_pod_network.cidr }}
    {{ kubernetes_kubeadm_init_extra_opts }}
  register: kubeadmin_init
  become: true
  when: not kubernetes_init_stat.stat.exists

- name: Print the init output to screen
  debug:
    msg: "{{ kubeadmin_init.stdout_lines }}"
  when: not kubernetes_init_stat.stat.exists

- name: Setup kubeconfig for root user
  shell: |
    mkdir -p $HOME/.kube
    ln -sf /etc/kubernetes/admin.conf $HOME/.kube/config
  args:
    warn: false
  become: true

- name: Setup kubeconfig for current user (not root user)
  shell: |
    mkdir -p $HOME/.kube
    sudo cp -f /etc/kubernetes/admin.conf $HOME/.kube/config
    sudo chown $(id -u):$(id -g) $HOME/.kube/config
  args:
    warn: false
  when:
    - set_kubeconfig_for_current_user | bool
    - ansible_user != 'root'

- name: Wait for Kubernetes running
  shell: kubectl cluster-info | grep 'Kubernetes master' | grep -q 'running'
  retries: 3
  delay: 2
  register: result
  until: result.rc == 0
  changed_when: false
  become: true

- import_tasks: config-flannel.yml
  when:
    - kubernetes_pod_network.cni == 'flannel'

- name: Configure Calico networking
  command: kubectl apply -f {{ kubernetes_calico_manifest_file }}
  register: calico_result
  changed_when: "'created' in calico_result.stdout"
  when: kubernetes_pod_network.cni == 'calico'
  become: true

- name: Allow pods on master node (if configured)
  command: kubectl taint nodes --all node-role.kubernetes.io/master-
  when:
    - kubernetes_allow_pods_on_master | bool
    - not kubernetes_init_stat.stat.exists
  become: true

- name: Check is Helm installed
  shell: command -v helm >/dev/null 2>&1
  register: helm_is_installed
  ignore_errors: yes

- name: Gather currently installed Helm version
  shell: helm version --client | awk -F'"' '{print $2}'
  changed_when: false
  register: helm_current_version
  when: helm_is_installed.rc == 0

- import_tasks: install-tiller.yml
  when:
    - helm_is_installed.rc == 0
    - helm_current_version.stdout.split('.')[0] == 'v2'

- name: Ensure pip3 is installed
  apt:
    name: python3-pip
    state: present
  become: true

- name: Install pip packages dependent by helm module
  pip:
    name:
      - pyhelm
      - grpcio
    state: present
    executable: pip3
  become: true

- name: Install hostpath-provisioner
  helm:
    chart:
      name: hostpath-provisioner
      source:
        type: repo
        location: https://charts.rimusz.net
    state: present
    name: hostpath-provisioner
    namespace: kube-system
  become: true
  #where: "'hostpath-provisioner' in kubernetes_components"